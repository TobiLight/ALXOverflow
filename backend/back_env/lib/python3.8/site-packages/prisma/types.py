# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']

MetricsFormat = Literal['json', 'prometheus']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    first_name: Optional[_str]
    last_name: Optional[_str]
    profile_picture: Optional[_str]
    bio: Optional[_str]
    reputation_score: Optional[_int]
    role: 'enums.Role'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    questions: 'QuestionCreateManyNestedWithoutRelationsInput'
    questions_count: Optional[_int]
    answers_count: Optional[_int]
    answers: 'AnswerCreateManyNestedWithoutRelationsInput'
    answersThread: 'AnswerThreadCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    id: _str
    username: _str
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    first_name: Optional[_str]
    last_name: Optional[_str]
    profile_picture: Optional[_str]
    bio: Optional[_str]
    reputation_score: Optional[_int]
    role: 'enums.Role'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    questions_count: Optional[_int]
    answers_count: Optional[_int]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    id: _str
    username: _str
    email: _str
    password: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_username_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    first_name: Optional[_str]
    last_name: Optional[_str]
    username: _str
    email: _str
    password: _str
    profile_picture: Optional[_str]
    bio: Optional[_str]
    reputation_score: Optional[Union[AtomicIntInput, _int]]
    role: 'enums.Role'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    questions: 'QuestionUpdateManyWithoutRelationsInput'
    questions_count: Optional[Union[AtomicIntInput, _int]]
    answers_count: Optional[Union[AtomicIntInput, _int]]
    answers: 'AnswerUpdateManyWithoutRelationsInput'
    answersThread: 'AnswerThreadUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    first_name: Optional[_str]
    last_name: Optional[_str]
    username: _str
    email: _str
    password: _str
    profile_picture: Optional[_str]
    bio: Optional[_str]
    reputation_score: Optional[Union[AtomicIntInput, _int]]
    role: 'enums.Role'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    questions_count: Optional[Union[AtomicIntInput, _int]]
    answers_count: Optional[Union[AtomicIntInput, _int]]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_first_name_OrderByInput = TypedDict(
    '_User_first_name_OrderByInput',
    {
        'first_name': 'SortOrder',
    },
    total=True
)

_User_last_name_OrderByInput = TypedDict(
    '_User_last_name_OrderByInput',
    {
        'last_name': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_profile_picture_OrderByInput = TypedDict(
    '_User_profile_picture_OrderByInput',
    {
        'profile_picture': 'SortOrder',
    },
    total=True
)

_User_bio_OrderByInput = TypedDict(
    '_User_bio_OrderByInput',
    {
        'bio': 'SortOrder',
    },
    total=True
)

_User_reputation_score_OrderByInput = TypedDict(
    '_User_reputation_score_OrderByInput',
    {
        'reputation_score': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_created_at_OrderByInput = TypedDict(
    '_User_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_User_updated_at_OrderByInput = TypedDict(
    '_User_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

_User_questions_count_OrderByInput = TypedDict(
    '_User_questions_count_OrderByInput',
    {
        'questions_count': 'SortOrder',
    },
    total=True
)

_User_answers_count_OrderByInput = TypedDict(
    '_User_answers_count_OrderByInput',
    {
        'answers_count': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_first_name_OrderByInput',
    '_User_last_name_OrderByInput',
    '_User_username_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_profile_picture_OrderByInput',
    '_User_bio_OrderByInput',
    '_User_reputation_score_OrderByInput',
    '_User_role_OrderByInput',
    '_User_created_at_OrderByInput',
    '_User_updated_at_OrderByInput',
    '_User_questions_count_OrderByInput',
    '_User_answers_count_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    questions: Union[bool, 'FindManyQuestionArgsFromUser']
    answers: Union[bool, 'FindManyAnswerArgsFromUser']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    questions: Union[bool, 'FindManyQuestionArgsFromUserRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive1']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    questions: Union[bool, 'FindManyQuestionArgsFromUserRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive2']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    questions: Union[bool, 'FindManyQuestionArgsFromUserRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive3']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    questions: Union[bool, 'FindManyQuestionArgsFromUserRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive4']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class QuestionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive1']
    author: Union[bool, 'UserArgsFromUserRecursive1']


class QuestionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive2']
    author: Union[bool, 'UserArgsFromUserRecursive2']


class QuestionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive3']
    author: Union[bool, 'UserArgsFromUserRecursive3']


class QuestionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    answers: Union[bool, 'FindManyAnswerArgsFromUserRecursive4']
    author: Union[bool, 'UserArgsFromUserRecursive4']


class QuestionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class QuestionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyQuestionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class AnswerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    question: Union[bool, 'QuestionArgsFromUserRecursive1']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive1']
    author: Union[bool, 'UserArgsFromUserRecursive1']


class AnswerIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    question: Union[bool, 'QuestionArgsFromUserRecursive2']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive2']
    author: Union[bool, 'UserArgsFromUserRecursive2']


class AnswerIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    question: Union[bool, 'QuestionArgsFromUserRecursive3']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive3']
    author: Union[bool, 'UserArgsFromUserRecursive3']


class AnswerIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    question: Union[bool, 'QuestionArgsFromUserRecursive4']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromUserRecursive4']
    author: Union[bool, 'UserArgsFromUserRecursive4']


class AnswerIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AnswerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAnswerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class AnswerThreadIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    answer: Union[bool, 'AnswerArgsFromUserRecursive1']
    author: Union[bool, 'UserArgsFromUserRecursive1']


class AnswerThreadIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    answer: Union[bool, 'AnswerArgsFromUserRecursive2']
    author: Union[bool, 'UserArgsFromUserRecursive2']


class AnswerThreadIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    answer: Union[bool, 'AnswerArgsFromUserRecursive3']
    author: Union[bool, 'UserArgsFromUserRecursive3']


class AnswerThreadIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    answer: Union[bool, 'AnswerArgsFromUserRecursive4']
    author: Union[bool, 'UserArgsFromUserRecursive4']


class AnswerThreadIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AnswerThreadArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class AnswerThreadArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class AnswerThreadArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class AnswerThreadArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class AnswerThreadArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAnswerThreadArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class FindManyAnswerThreadArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class FindManyAnswerThreadArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class FindManyAnswerThreadArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class FindManyAnswerThreadArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    reputation_score: Union[None, _int, 'types.IntFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    questions: 'QuestionListRelationFilter'
    questions_count: Union[None, _int, 'types.IntFilter']
    answers_count: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    answersThread: 'AnswerThreadListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    reputation_score: Union[None, _int, 'types.IntFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    questions: 'QuestionListRelationFilter'
    questions_count: Union[None, _int, 'types.IntFilter']
    answers_count: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    answersThread: 'AnswerThreadListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    reputation_score: Union[None, _int, 'types.IntFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    questions: 'QuestionListRelationFilter'
    questions_count: Union[None, _int, 'types.IntFilter']
    answers_count: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    answersThread: 'AnswerThreadListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    reputation_score: Union[None, _int, 'types.IntFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    questions: 'QuestionListRelationFilter'
    questions_count: Union[None, _int, 'types.IntFilter']
    answers_count: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    answersThread: 'AnswerThreadListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    first_name: Union[None, _str, 'types.StringFilter']
    last_name: Union[None, _str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    profile_picture: Union[None, _str, 'types.StringFilter']
    bio: Union[None, _str, 'types.StringFilter']
    reputation_score: Union[None, _int, 'types.IntFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    questions: 'QuestionListRelationFilter'
    questions_count: Union[None, _int, 'types.IntFilter']
    answers_count: Union[None, _int, 'types.IntFilter']
    answers: 'AnswerListRelationFilter'
    answersThread: 'AnswerThreadListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    reputation_score: Union[_int, 'types.IntWithAggregatesFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    questions_count: Union[_int, 'types.IntWithAggregatesFilter']
    answers_count: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    reputation_score: Union[_int, 'types.IntWithAggregatesFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    questions_count: Union[_int, 'types.IntWithAggregatesFilter']
    answers_count: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    reputation_score: Union[_int, 'types.IntWithAggregatesFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    questions_count: Union[_int, 'types.IntWithAggregatesFilter']
    answers_count: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    reputation_score: Union[_int, 'types.IntWithAggregatesFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    questions_count: Union[_int, 'types.IntWithAggregatesFilter']
    answers_count: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    first_name: Union[_str, 'types.StringWithAggregatesFilter']
    last_name: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    profile_picture: Union[_str, 'types.StringWithAggregatesFilter']
    bio: Union[_str, 'types.StringWithAggregatesFilter']
    reputation_score: Union[_int, 'types.IntWithAggregatesFilter']
    role: 'enums.Role'
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    questions_count: Union[_int, 'types.IntWithAggregatesFilter']
    answers_count: Union[_int, 'types.IntWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    first_name: _str
    last_name: _str
    username: _str
    email: _str
    password: _str
    profile_picture: _str
    bio: _str
    reputation_score: _int
    role: 'enums.Role'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    questions_count: _int
    answers_count: _int
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    reputation_score: float
    questions_count: float
    answers_count: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    reputation_score: _int
    questions_count: _int
    answers_count: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    first_name: _str
    last_name: _str
    username: _str
    email: _str
    password: _str
    profile_picture: _str
    bio: _str
    reputation_score: _int
    role: 'enums.Role'
    created_at: datetime.datetime
    updated_at: datetime.datetime
    questions_count: _int
    answers_count: _int


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    first_name: bool
    last_name: bool
    username: bool
    email: bool
    password: bool
    profile_picture: bool
    bio: bool
    reputation_score: bool
    role: bool
    created_at: bool
    updated_at: bool
    questions_count: bool
    answers_count: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    first_name: bool
    last_name: bool
    username: bool
    email: bool
    password: bool
    profile_picture: bool
    bio: bool
    reputation_score: bool
    role: bool
    created_at: bool
    updated_at: bool
    questions_count: bool
    answers_count: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    reputation_score: bool
    questions_count: bool
    answers_count: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'first_name': bool,
        'last_name': bool,
        'username': bool,
        'email': bool,
        'password': bool,
        'profile_picture': bool,
        'bio': bool,
        'reputation_score': bool,
        'role': bool,
        'created_at': bool,
        'updated_at': bool,
        'questions_count': bool,
        'answers_count': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'first_name': int,
        'last_name': int,
        'username': int,
        'email': int,
        'password': int,
        'profile_picture': int,
        'bio': int,
        'reputation_score': int,
        'role': int,
        'created_at': int,
        'updated_at': int,
        'questions_count': int,
        'answers_count': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'first_name',
    'last_name',
    'username',
    'email',
    'password',
    'profile_picture',
    'bio',
    'reputation_score',
    'role',
    'created_at',
    'updated_at',
    'questions',
    'questions_count',
    'answers_count',
    'answers',
    'answersThread',
]
UserScalarFieldKeys = Literal[
    'id',
    'first_name',
    'last_name',
    'username',
    'email',
    'password',
    'profile_picture',
    'bio',
    'reputation_score',
    'role',
    'created_at',
    'updated_at',
    'questions_count',
    'answers_count',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'questions',
        'answers',
        'answersThread',
    ]

# Question types

class QuestionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Question create method"""
    answers: 'AnswerCreateManyNestedWithoutRelationsInput'
    author_id: _str
    author: 'UserCreateNestedWithoutRelationsInput'
    created_at: datetime.datetime
    updated_at: datetime.datetime


class QuestionCreateInput(QuestionOptionalCreateInput):
    """Required arguments to the Question create method"""
    id: _str
    title: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class QuestionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Question create method, without relations"""
    author_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class QuestionCreateWithoutRelationsInput(QuestionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Question create method, without relations"""
    id: _str
    title: _str
    content: _str


class QuestionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'QuestionCreateWithoutRelationsInput'
    connect: 'QuestionWhereUniqueInput'


class QuestionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['QuestionCreateWithoutRelationsInput', List['QuestionCreateWithoutRelationsInput']]
    connect: Union['QuestionWhereUniqueInput', List['QuestionWhereUniqueInput']]


_QuestionWhereUnique_id_Input = TypedDict(
    '_QuestionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

QuestionWhereUniqueInput = _QuestionWhereUnique_id_Input


class QuestionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    content: _str
    answers: 'AnswerUpdateManyWithoutRelationsInput'
    author: 'UserUpdateOneWithoutRelationsInput'
    created_at: datetime.datetime
    updated_at: datetime.datetime


class QuestionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    content: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


class QuestionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['QuestionCreateWithoutRelationsInput']
    connect: List['QuestionWhereUniqueInput']
    set: List['QuestionWhereUniqueInput']
    disconnect: List['QuestionWhereUniqueInput']
    delete: List['QuestionWhereUniqueInput']

    # TODO
    # update: List['QuestionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['QuestionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['QuestionScalarWhereInput']
    # upsert: List['QuestionUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['QuestionCreateOrConnectWithoutRelationsInput']


class QuestionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'QuestionCreateWithoutRelationsInput'
    connect: 'QuestionWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'QuestionUpdateInput'
    # upsert: 'QuestionUpsertWithoutRelationsInput'
    # connectOrCreate: 'QuestionCreateOrConnectWithoutRelationsInput'


class QuestionUpsertInput(TypedDict):
    create: 'QuestionCreateInput'
    update: 'QuestionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Question_id_OrderByInput = TypedDict(
    '_Question_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Question_title_OrderByInput = TypedDict(
    '_Question_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Question_content_OrderByInput = TypedDict(
    '_Question_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Question_author_id_OrderByInput = TypedDict(
    '_Question_author_id_OrderByInput',
    {
        'author_id': 'SortOrder',
    },
    total=True
)

_Question_created_at_OrderByInput = TypedDict(
    '_Question_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Question_updated_at_OrderByInput = TypedDict(
    '_Question_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

QuestionOrderByInput = Union[
    '_Question_id_OrderByInput',
    '_Question_title_OrderByInput',
    '_Question_content_OrderByInput',
    '_Question_author_id_OrderByInput',
    '_Question_created_at_OrderByInput',
    '_Question_updated_at_OrderByInput',
]



# recursive Question types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

QuestionRelationFilter = TypedDict(
    'QuestionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class QuestionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class QuestionInclude(TypedDict, total=False):
    """Question relational arguments"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestion']
    author: Union[bool, 'UserArgsFromQuestion']


    

class UserIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    questions: Union[bool, 'FindManyQuestionArgsFromQuestionRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive1']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive1']


class UserIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    questions: Union[bool, 'FindManyQuestionArgsFromQuestionRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive2']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive2']


class UserIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    questions: Union[bool, 'FindManyQuestionArgsFromQuestionRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive3']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive3']


class UserIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    questions: Union[bool, 'FindManyQuestionArgsFromQuestionRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive4']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive4']


class UserIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class UserArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyUserArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class QuestionIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive1']
    author: Union[bool, 'UserArgsFromQuestionRecursive1']


class QuestionIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive2']
    author: Union[bool, 'UserArgsFromQuestionRecursive2']


class QuestionIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive3']
    author: Union[bool, 'UserArgsFromQuestionRecursive3']


class QuestionIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    answers: Union[bool, 'FindManyAnswerArgsFromQuestionRecursive4']
    author: Union[bool, 'UserArgsFromQuestionRecursive4']


class QuestionIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class QuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyQuestionArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class AnswerIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive1']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive1']
    author: Union[bool, 'UserArgsFromQuestionRecursive1']


class AnswerIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive2']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive2']
    author: Union[bool, 'UserArgsFromQuestionRecursive2']


class AnswerIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive3']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive3']
    author: Union[bool, 'UserArgsFromQuestionRecursive3']


class AnswerIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    question: Union[bool, 'QuestionArgsFromQuestionRecursive4']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromQuestionRecursive4']
    author: Union[bool, 'UserArgsFromQuestionRecursive4']


class AnswerIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class AnswerArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyAnswerArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class AnswerThreadIncludeFromQuestion(TypedDict, total=False):
    """Relational arguments for Question"""
    answer: Union[bool, 'AnswerArgsFromQuestionRecursive1']
    author: Union[bool, 'UserArgsFromQuestionRecursive1']


class AnswerThreadIncludeFromQuestionRecursive1(TypedDict, total=False):
    """Relational arguments for Question"""
    answer: Union[bool, 'AnswerArgsFromQuestionRecursive2']
    author: Union[bool, 'UserArgsFromQuestionRecursive2']


class AnswerThreadIncludeFromQuestionRecursive2(TypedDict, total=False):
    """Relational arguments for Question"""
    answer: Union[bool, 'AnswerArgsFromQuestionRecursive3']
    author: Union[bool, 'UserArgsFromQuestionRecursive3']


class AnswerThreadIncludeFromQuestionRecursive3(TypedDict, total=False):
    """Relational arguments for Question"""
    answer: Union[bool, 'AnswerArgsFromQuestionRecursive4']
    author: Union[bool, 'UserArgsFromQuestionRecursive4']


class AnswerThreadIncludeFromQuestionRecursive4(TypedDict, total=False):
    """Relational arguments for Question"""

    

class AnswerThreadArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class AnswerThreadArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class AnswerThreadArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class AnswerThreadArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class AnswerThreadArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    
    

class FindManyAnswerThreadArgsFromQuestion(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class FindManyAnswerThreadArgsFromQuestionRecursive1(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class FindManyAnswerThreadArgsFromQuestionRecursive2(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class FindManyAnswerThreadArgsFromQuestionRecursive3(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class FindManyAnswerThreadArgsFromQuestionRecursive4(TypedDict, total=False):
    """Arguments for Question"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    


FindManyQuestionArgs = FindManyQuestionArgsFromQuestion
FindFirstQuestionArgs = FindManyQuestionArgsFromQuestion


    

class QuestionWhereInput(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answers: 'AnswerListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive1', List['QuestionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive1']
    OR: List['QuestionWhereInputRecursive1']
    NOT: List['QuestionWhereInputRecursive1']


class QuestionWhereInputRecursive1(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answers: 'AnswerListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive2', List['QuestionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive2']
    OR: List['QuestionWhereInputRecursive2']
    NOT: List['QuestionWhereInputRecursive2']


class QuestionWhereInputRecursive2(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answers: 'AnswerListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive3', List['QuestionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive3']
    OR: List['QuestionWhereInputRecursive3']
    NOT: List['QuestionWhereInputRecursive3']


class QuestionWhereInputRecursive3(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answers: 'AnswerListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['QuestionWhereInputRecursive4', List['QuestionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['QuestionWhereInputRecursive4']
    OR: List['QuestionWhereInputRecursive4']
    NOT: List['QuestionWhereInputRecursive4']


class QuestionWhereInputRecursive4(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answers: 'AnswerListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Question types


    

class QuestionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive1']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive1']


class QuestionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive2']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive2']


class QuestionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive3']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive3']


class QuestionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['QuestionScalarWhereWithAggregatesInputRecursive4']
    OR: List['QuestionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['QuestionScalarWhereWithAggregatesInputRecursive4']


class QuestionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Question arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class QuestionGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    content: _str
    author_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'QuestionSumAggregateOutput'
    _avg: 'QuestionAvgAggregateOutput'
    _min: 'QuestionMinAggregateOutput'
    _max: 'QuestionMaxAggregateOutput'
    _count: 'QuestionCountAggregateOutput'


class QuestionAvgAggregateOutput(TypedDict, total=False):
    """Question output for aggregating averages"""


class QuestionSumAggregateOutput(TypedDict, total=False):
    """Question output for aggregating sums"""


class QuestionScalarAggregateOutput(TypedDict, total=False):
    """Question output including scalar fields"""
    id: _str
    title: _str
    content: _str
    author_id: _str
    created_at: datetime.datetime
    updated_at: datetime.datetime


QuestionMinAggregateOutput = QuestionScalarAggregateOutput
QuestionMaxAggregateOutput = QuestionScalarAggregateOutput


class QuestionMaxAggregateInput(TypedDict, total=False):
    """Question input for aggregating by max"""
    id: bool
    title: bool
    content: bool
    author_id: bool
    created_at: bool
    updated_at: bool


class QuestionMinAggregateInput(TypedDict, total=False):
    """Question input for aggregating by min"""
    id: bool
    title: bool
    content: bool
    author_id: bool
    created_at: bool
    updated_at: bool


class QuestionNumberAggregateInput(TypedDict, total=False):
    """Question input for aggregating numbers"""


QuestionAvgAggregateInput = QuestionNumberAggregateInput
QuestionSumAggregateInput = QuestionNumberAggregateInput


QuestionCountAggregateInput = TypedDict(
    'QuestionCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'content': bool,
        'author_id': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

QuestionCountAggregateOutput = TypedDict(
    'QuestionCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'content': int,
        'author_id': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


QuestionKeys = Literal[
    'id',
    'title',
    'content',
    'answers',
    'author_id',
    'author',
    'created_at',
    'updated_at',
]
QuestionScalarFieldKeys = Literal[
    'id',
    'title',
    'content',
    'author_id',
    'created_at',
    'updated_at',
]
QuestionScalarFieldKeysT = TypeVar('QuestionScalarFieldKeysT', bound=QuestionScalarFieldKeys)

QuestionRelationalFieldKeys = Literal[
        'answers',
        'author',
    ]

# Answer types

class AnswerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Answer create method"""
    question_id: _str
    question: 'QuestionCreateNestedWithoutRelationsInput'
    answer_thread: 'AnswerThreadCreateManyNestedWithoutRelationsInput'
    author_id: _str
    author: 'UserCreateNestedWithoutRelationsInput'
    vote_count: Optional[_int]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerCreateInput(AnswerOptionalCreateInput):
    """Required arguments to the Answer create method"""
    id: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AnswerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Answer create method, without relations"""
    question_id: _str
    author_id: _str
    vote_count: Optional[_int]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerCreateWithoutRelationsInput(AnswerOptionalCreateWithoutRelationsInput):
    """Required arguments to the Answer create method, without relations"""
    id: _str
    content: _str


class AnswerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AnswerCreateWithoutRelationsInput'
    connect: 'AnswerWhereUniqueInput'


class AnswerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AnswerCreateWithoutRelationsInput', List['AnswerCreateWithoutRelationsInput']]
    connect: Union['AnswerWhereUniqueInput', List['AnswerWhereUniqueInput']]


_AnswerWhereUnique_id_Input = TypedDict(
    '_AnswerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AnswerWhereUniqueInput = _AnswerWhereUnique_id_Input


class AnswerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    content: _str
    question: 'QuestionUpdateOneWithoutRelationsInput'
    answer_thread: 'AnswerThreadUpdateManyWithoutRelationsInput'
    author: 'UserUpdateOneWithoutRelationsInput'
    vote_count: Optional[Union[AtomicIntInput, _int]]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    content: _str
    vote_count: Optional[Union[AtomicIntInput, _int]]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AnswerCreateWithoutRelationsInput']
    connect: List['AnswerWhereUniqueInput']
    set: List['AnswerWhereUniqueInput']
    disconnect: List['AnswerWhereUniqueInput']
    delete: List['AnswerWhereUniqueInput']

    # TODO
    # update: List['AnswerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AnswerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AnswerScalarWhereInput']
    # upsert: List['AnswerUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AnswerCreateOrConnectWithoutRelationsInput']


class AnswerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AnswerCreateWithoutRelationsInput'
    connect: 'AnswerWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AnswerUpdateInput'
    # upsert: 'AnswerUpsertWithoutRelationsInput'
    # connectOrCreate: 'AnswerCreateOrConnectWithoutRelationsInput'


class AnswerUpsertInput(TypedDict):
    create: 'AnswerCreateInput'
    update: 'AnswerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Answer_id_OrderByInput = TypedDict(
    '_Answer_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Answer_content_OrderByInput = TypedDict(
    '_Answer_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Answer_question_id_OrderByInput = TypedDict(
    '_Answer_question_id_OrderByInput',
    {
        'question_id': 'SortOrder',
    },
    total=True
)

_Answer_author_id_OrderByInput = TypedDict(
    '_Answer_author_id_OrderByInput',
    {
        'author_id': 'SortOrder',
    },
    total=True
)

_Answer_vote_count_OrderByInput = TypedDict(
    '_Answer_vote_count_OrderByInput',
    {
        'vote_count': 'SortOrder',
    },
    total=True
)

_Answer_created_at_OrderByInput = TypedDict(
    '_Answer_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Answer_updated_at_OrderByInput = TypedDict(
    '_Answer_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

AnswerOrderByInput = Union[
    '_Answer_id_OrderByInput',
    '_Answer_content_OrderByInput',
    '_Answer_question_id_OrderByInput',
    '_Answer_author_id_OrderByInput',
    '_Answer_vote_count_OrderByInput',
    '_Answer_created_at_OrderByInput',
    '_Answer_updated_at_OrderByInput',
]



# recursive Answer types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AnswerRelationFilter = TypedDict(
    'AnswerRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AnswerListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AnswerInclude(TypedDict, total=False):
    """Answer relational arguments"""
    question: Union[bool, 'QuestionArgsFromAnswer']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswer']
    author: Union[bool, 'UserArgsFromAnswer']


    

class UserIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive1']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive1']


class UserIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive2']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive2']


class UserIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive3']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive3']


class UserIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive4']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive4']


class UserIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class UserArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyUserArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class QuestionIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive1']
    author: Union[bool, 'UserArgsFromAnswerRecursive1']


class QuestionIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive2']
    author: Union[bool, 'UserArgsFromAnswerRecursive2']


class QuestionIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive3']
    author: Union[bool, 'UserArgsFromAnswerRecursive3']


class QuestionIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerRecursive4']
    author: Union[bool, 'UserArgsFromAnswerRecursive4']


class QuestionIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class QuestionArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyQuestionArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class AnswerIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive1']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive1']
    author: Union[bool, 'UserArgsFromAnswerRecursive1']


class AnswerIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive2']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive2']
    author: Union[bool, 'UserArgsFromAnswerRecursive2']


class AnswerIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive3']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive3']
    author: Union[bool, 'UserArgsFromAnswerRecursive3']


class AnswerIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    question: Union[bool, 'QuestionArgsFromAnswerRecursive4']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerRecursive4']
    author: Union[bool, 'UserArgsFromAnswerRecursive4']


class AnswerIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class AnswerArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyAnswerArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class AnswerThreadIncludeFromAnswer(TypedDict, total=False):
    """Relational arguments for Answer"""
    answer: Union[bool, 'AnswerArgsFromAnswerRecursive1']
    author: Union[bool, 'UserArgsFromAnswerRecursive1']


class AnswerThreadIncludeFromAnswerRecursive1(TypedDict, total=False):
    """Relational arguments for Answer"""
    answer: Union[bool, 'AnswerArgsFromAnswerRecursive2']
    author: Union[bool, 'UserArgsFromAnswerRecursive2']


class AnswerThreadIncludeFromAnswerRecursive2(TypedDict, total=False):
    """Relational arguments for Answer"""
    answer: Union[bool, 'AnswerArgsFromAnswerRecursive3']
    author: Union[bool, 'UserArgsFromAnswerRecursive3']


class AnswerThreadIncludeFromAnswerRecursive3(TypedDict, total=False):
    """Relational arguments for Answer"""
    answer: Union[bool, 'AnswerArgsFromAnswerRecursive4']
    author: Union[bool, 'UserArgsFromAnswerRecursive4']


class AnswerThreadIncludeFromAnswerRecursive4(TypedDict, total=False):
    """Relational arguments for Answer"""

    

class AnswerThreadArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class AnswerThreadArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class AnswerThreadArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class AnswerThreadArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class AnswerThreadArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    
    

class FindManyAnswerThreadArgsFromAnswer(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class FindManyAnswerThreadArgsFromAnswerRecursive1(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class FindManyAnswerThreadArgsFromAnswerRecursive2(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class FindManyAnswerThreadArgsFromAnswerRecursive3(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class FindManyAnswerThreadArgsFromAnswerRecursive4(TypedDict, total=False):
    """Arguments for Answer"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    


FindManyAnswerArgs = FindManyAnswerArgsFromAnswer
FindFirstAnswerArgs = FindManyAnswerArgsFromAnswer


    

class AnswerWhereInput(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    question_id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    answer_thread: 'AnswerThreadListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive1', List['AnswerWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive1']
    OR: List['AnswerWhereInputRecursive1']
    NOT: List['AnswerWhereInputRecursive1']


class AnswerWhereInputRecursive1(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    question_id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    answer_thread: 'AnswerThreadListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive2', List['AnswerWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive2']
    OR: List['AnswerWhereInputRecursive2']
    NOT: List['AnswerWhereInputRecursive2']


class AnswerWhereInputRecursive2(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    question_id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    answer_thread: 'AnswerThreadListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive3', List['AnswerWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive3']
    OR: List['AnswerWhereInputRecursive3']
    NOT: List['AnswerWhereInputRecursive3']


class AnswerWhereInputRecursive3(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    question_id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    answer_thread: 'AnswerThreadListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerWhereInputRecursive4', List['AnswerWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AnswerWhereInputRecursive4']
    OR: List['AnswerWhereInputRecursive4']
    NOT: List['AnswerWhereInputRecursive4']


class AnswerWhereInputRecursive4(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    question_id: Union[_str, 'types.StringFilter']
    question: 'QuestionRelationFilter'
    answer_thread: 'AnswerThreadListRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Answer types


    

class AnswerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    question_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive1']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive1']


class AnswerScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    question_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive2']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive2']


class AnswerScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    question_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive3']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive3']


class AnswerScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    question_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerScalarWhereWithAggregatesInputRecursive4']
    OR: List['AnswerScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AnswerScalarWhereWithAggregatesInputRecursive4']


class AnswerScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Answer arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    question_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AnswerGroupByOutput(TypedDict, total=False):
    id: _str
    content: _str
    question_id: _str
    author_id: _str
    vote_count: _int
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'AnswerSumAggregateOutput'
    _avg: 'AnswerAvgAggregateOutput'
    _min: 'AnswerMinAggregateOutput'
    _max: 'AnswerMaxAggregateOutput'
    _count: 'AnswerCountAggregateOutput'


class AnswerAvgAggregateOutput(TypedDict, total=False):
    """Answer output for aggregating averages"""
    vote_count: float


class AnswerSumAggregateOutput(TypedDict, total=False):
    """Answer output for aggregating sums"""
    vote_count: _int


class AnswerScalarAggregateOutput(TypedDict, total=False):
    """Answer output including scalar fields"""
    id: _str
    content: _str
    question_id: _str
    author_id: _str
    vote_count: _int
    created_at: datetime.datetime
    updated_at: datetime.datetime


AnswerMinAggregateOutput = AnswerScalarAggregateOutput
AnswerMaxAggregateOutput = AnswerScalarAggregateOutput


class AnswerMaxAggregateInput(TypedDict, total=False):
    """Answer input for aggregating by max"""
    id: bool
    content: bool
    question_id: bool
    author_id: bool
    vote_count: bool
    created_at: bool
    updated_at: bool


class AnswerMinAggregateInput(TypedDict, total=False):
    """Answer input for aggregating by min"""
    id: bool
    content: bool
    question_id: bool
    author_id: bool
    vote_count: bool
    created_at: bool
    updated_at: bool


class AnswerNumberAggregateInput(TypedDict, total=False):
    """Answer input for aggregating numbers"""
    vote_count: bool


AnswerAvgAggregateInput = AnswerNumberAggregateInput
AnswerSumAggregateInput = AnswerNumberAggregateInput


AnswerCountAggregateInput = TypedDict(
    'AnswerCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'question_id': bool,
        'author_id': bool,
        'vote_count': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

AnswerCountAggregateOutput = TypedDict(
    'AnswerCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'question_id': int,
        'author_id': int,
        'vote_count': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


AnswerKeys = Literal[
    'id',
    'content',
    'question_id',
    'question',
    'answer_thread',
    'author_id',
    'author',
    'vote_count',
    'created_at',
    'updated_at',
]
AnswerScalarFieldKeys = Literal[
    'id',
    'content',
    'question_id',
    'author_id',
    'vote_count',
    'created_at',
    'updated_at',
]
AnswerScalarFieldKeysT = TypeVar('AnswerScalarFieldKeysT', bound=AnswerScalarFieldKeys)

AnswerRelationalFieldKeys = Literal[
        'question',
        'answer_thread',
        'author',
    ]

# AnswerThread types

class AnswerThreadOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the AnswerThread create method"""
    answer_id: _str
    answer: 'AnswerCreateNestedWithoutRelationsInput'
    author_id: _str
    author: 'UserCreateNestedWithoutRelationsInput'
    vote_count: Optional[_int]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerThreadCreateInput(AnswerThreadOptionalCreateInput):
    """Required arguments to the AnswerThread create method"""
    id: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AnswerThreadOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the AnswerThread create method, without relations"""
    answer_id: _str
    author_id: _str
    vote_count: Optional[_int]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerThreadCreateWithoutRelationsInput(AnswerThreadOptionalCreateWithoutRelationsInput):
    """Required arguments to the AnswerThread create method, without relations"""
    id: _str
    content: _str


class AnswerThreadCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AnswerThreadCreateWithoutRelationsInput'
    connect: 'AnswerThreadWhereUniqueInput'


class AnswerThreadCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AnswerThreadCreateWithoutRelationsInput', List['AnswerThreadCreateWithoutRelationsInput']]
    connect: Union['AnswerThreadWhereUniqueInput', List['AnswerThreadWhereUniqueInput']]


_AnswerThreadWhereUnique_id_Input = TypedDict(
    '_AnswerThreadWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

AnswerThreadWhereUniqueInput = _AnswerThreadWhereUnique_id_Input


class AnswerThreadUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    content: _str
    answer: 'AnswerUpdateOneWithoutRelationsInput'
    author: 'UserUpdateOneWithoutRelationsInput'
    vote_count: Optional[Union[AtomicIntInput, _int]]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerThreadUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    content: _str
    vote_count: Optional[Union[AtomicIntInput, _int]]
    created_at: datetime.datetime
    updated_at: datetime.datetime


class AnswerThreadUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AnswerThreadCreateWithoutRelationsInput']
    connect: List['AnswerThreadWhereUniqueInput']
    set: List['AnswerThreadWhereUniqueInput']
    disconnect: List['AnswerThreadWhereUniqueInput']
    delete: List['AnswerThreadWhereUniqueInput']

    # TODO
    # update: List['AnswerThreadUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AnswerThreadUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AnswerThreadScalarWhereInput']
    # upsert: List['AnswerThreadUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['AnswerThreadCreateOrConnectWithoutRelationsInput']


class AnswerThreadUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AnswerThreadCreateWithoutRelationsInput'
    connect: 'AnswerThreadWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AnswerThreadUpdateInput'
    # upsert: 'AnswerThreadUpsertWithoutRelationsInput'
    # connectOrCreate: 'AnswerThreadCreateOrConnectWithoutRelationsInput'


class AnswerThreadUpsertInput(TypedDict):
    create: 'AnswerThreadCreateInput'
    update: 'AnswerThreadUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_AnswerThread_id_OrderByInput = TypedDict(
    '_AnswerThread_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_AnswerThread_content_OrderByInput = TypedDict(
    '_AnswerThread_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_AnswerThread_answer_id_OrderByInput = TypedDict(
    '_AnswerThread_answer_id_OrderByInput',
    {
        'answer_id': 'SortOrder',
    },
    total=True
)

_AnswerThread_author_id_OrderByInput = TypedDict(
    '_AnswerThread_author_id_OrderByInput',
    {
        'author_id': 'SortOrder',
    },
    total=True
)

_AnswerThread_vote_count_OrderByInput = TypedDict(
    '_AnswerThread_vote_count_OrderByInput',
    {
        'vote_count': 'SortOrder',
    },
    total=True
)

_AnswerThread_created_at_OrderByInput = TypedDict(
    '_AnswerThread_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_AnswerThread_updated_at_OrderByInput = TypedDict(
    '_AnswerThread_updated_at_OrderByInput',
    {
        'updated_at': 'SortOrder',
    },
    total=True
)

AnswerThreadOrderByInput = Union[
    '_AnswerThread_id_OrderByInput',
    '_AnswerThread_content_OrderByInput',
    '_AnswerThread_answer_id_OrderByInput',
    '_AnswerThread_author_id_OrderByInput',
    '_AnswerThread_vote_count_OrderByInput',
    '_AnswerThread_created_at_OrderByInput',
    '_AnswerThread_updated_at_OrderByInput',
]



# recursive AnswerThread types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AnswerThreadRelationFilter = TypedDict(
    'AnswerThreadRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AnswerThreadListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AnswerThreadInclude(TypedDict, total=False):
    """AnswerThread relational arguments"""
    answer: Union[bool, 'AnswerArgsFromAnswerThread']
    author: Union[bool, 'UserArgsFromAnswerThread']


    

class UserIncludeFromAnswerThread(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerThreadRecursive1']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive1']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive1']


class UserIncludeFromAnswerThreadRecursive1(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerThreadRecursive2']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive2']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive2']


class UserIncludeFromAnswerThreadRecursive2(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerThreadRecursive3']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive3']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive3']


class UserIncludeFromAnswerThreadRecursive3(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    questions: Union[bool, 'FindManyQuestionArgsFromAnswerThreadRecursive4']
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive4']
    answersThread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive4']


class UserIncludeFromAnswerThreadRecursive4(TypedDict, total=False):
    """Relational arguments for AnswerThread"""

    

class UserArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    
    

class FindManyUserArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class QuestionIncludeFromAnswerThread(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive1']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive1']


class QuestionIncludeFromAnswerThreadRecursive1(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive2']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive2']


class QuestionIncludeFromAnswerThreadRecursive2(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive3']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive3']


class QuestionIncludeFromAnswerThreadRecursive3(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answers: Union[bool, 'FindManyAnswerArgsFromAnswerThreadRecursive4']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive4']


class QuestionIncludeFromAnswerThreadRecursive4(TypedDict, total=False):
    """Relational arguments for AnswerThread"""

    

class QuestionArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'QuestionIncludeFromQuestionRecursive1'


class QuestionArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'QuestionIncludeFromQuestionRecursive2'


class QuestionArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'QuestionIncludeFromQuestionRecursive3'


class QuestionArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'QuestionIncludeFromQuestionRecursive4'


class QuestionArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    
    

class FindManyQuestionArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive1'


class FindManyQuestionArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive2'


class FindManyQuestionArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive3'


class FindManyQuestionArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    include: 'QuestionIncludeFromQuestionRecursive4'


class FindManyQuestionArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['QuestionOrderByInput', List['QuestionOrderByInput']]
    where: 'QuestionWhereInput'
    cursor: 'QuestionWhereUniqueInput'
    distinct: List['QuestionScalarFieldKeys']
    
    

class AnswerIncludeFromAnswerThread(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    question: Union[bool, 'QuestionArgsFromAnswerThreadRecursive1']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive1']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive1']


class AnswerIncludeFromAnswerThreadRecursive1(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    question: Union[bool, 'QuestionArgsFromAnswerThreadRecursive2']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive2']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive2']


class AnswerIncludeFromAnswerThreadRecursive2(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    question: Union[bool, 'QuestionArgsFromAnswerThreadRecursive3']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive3']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive3']


class AnswerIncludeFromAnswerThreadRecursive3(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    question: Union[bool, 'QuestionArgsFromAnswerThreadRecursive4']
    answer_thread: Union[bool, 'FindManyAnswerThreadArgsFromAnswerThreadRecursive4']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive4']


class AnswerIncludeFromAnswerThreadRecursive4(TypedDict, total=False):
    """Relational arguments for AnswerThread"""

    

class AnswerArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerIncludeFromAnswerRecursive1'


class AnswerArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerIncludeFromAnswerRecursive2'


class AnswerArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerIncludeFromAnswerRecursive3'


class AnswerArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerIncludeFromAnswerRecursive4'


class AnswerArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    
    

class FindManyAnswerArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive1'


class FindManyAnswerArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive2'


class FindManyAnswerArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive3'


class FindManyAnswerArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    include: 'AnswerIncludeFromAnswerRecursive4'


class FindManyAnswerArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerOrderByInput', List['AnswerOrderByInput']]
    where: 'AnswerWhereInput'
    cursor: 'AnswerWhereUniqueInput'
    distinct: List['AnswerScalarFieldKeys']
    
    

class AnswerThreadIncludeFromAnswerThread(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answer: Union[bool, 'AnswerArgsFromAnswerThreadRecursive1']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive1']


class AnswerThreadIncludeFromAnswerThreadRecursive1(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answer: Union[bool, 'AnswerArgsFromAnswerThreadRecursive2']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive2']


class AnswerThreadIncludeFromAnswerThreadRecursive2(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answer: Union[bool, 'AnswerArgsFromAnswerThreadRecursive3']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive3']


class AnswerThreadIncludeFromAnswerThreadRecursive3(TypedDict, total=False):
    """Relational arguments for AnswerThread"""
    answer: Union[bool, 'AnswerArgsFromAnswerThreadRecursive4']
    author: Union[bool, 'UserArgsFromAnswerThreadRecursive4']


class AnswerThreadIncludeFromAnswerThreadRecursive4(TypedDict, total=False):
    """Relational arguments for AnswerThread"""

    

class AnswerThreadArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class AnswerThreadArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class AnswerThreadArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class AnswerThreadArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class AnswerThreadArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    
    

class FindManyAnswerThreadArgsFromAnswerThread(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive1'


class FindManyAnswerThreadArgsFromAnswerThreadRecursive1(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive2'


class FindManyAnswerThreadArgsFromAnswerThreadRecursive2(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive3'


class FindManyAnswerThreadArgsFromAnswerThreadRecursive3(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    include: 'AnswerThreadIncludeFromAnswerThreadRecursive4'


class FindManyAnswerThreadArgsFromAnswerThreadRecursive4(TypedDict, total=False):
    """Arguments for AnswerThread"""
    take: int
    skip: int
    order_by: Union['AnswerThreadOrderByInput', List['AnswerThreadOrderByInput']]
    where: 'AnswerThreadWhereInput'
    cursor: 'AnswerThreadWhereUniqueInput'
    distinct: List['AnswerThreadScalarFieldKeys']
    


FindManyAnswerThreadArgs = FindManyAnswerThreadArgsFromAnswerThread
FindFirstAnswerThreadArgs = FindManyAnswerThreadArgsFromAnswerThread


    

class AnswerThreadWhereInput(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answer_id: Union[_str, 'types.StringFilter']
    answer: 'AnswerRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerThreadWhereInputRecursive1', List['AnswerThreadWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AnswerThreadWhereInputRecursive1']
    OR: List['AnswerThreadWhereInputRecursive1']
    NOT: List['AnswerThreadWhereInputRecursive1']


class AnswerThreadWhereInputRecursive1(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answer_id: Union[_str, 'types.StringFilter']
    answer: 'AnswerRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerThreadWhereInputRecursive2', List['AnswerThreadWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AnswerThreadWhereInputRecursive2']
    OR: List['AnswerThreadWhereInputRecursive2']
    NOT: List['AnswerThreadWhereInputRecursive2']


class AnswerThreadWhereInputRecursive2(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answer_id: Union[_str, 'types.StringFilter']
    answer: 'AnswerRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerThreadWhereInputRecursive3', List['AnswerThreadWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AnswerThreadWhereInputRecursive3']
    OR: List['AnswerThreadWhereInputRecursive3']
    NOT: List['AnswerThreadWhereInputRecursive3']


class AnswerThreadWhereInputRecursive3(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answer_id: Union[_str, 'types.StringFilter']
    answer: 'AnswerRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['AnswerThreadWhereInputRecursive4', List['AnswerThreadWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AnswerThreadWhereInputRecursive4']
    OR: List['AnswerThreadWhereInputRecursive4']
    NOT: List['AnswerThreadWhereInputRecursive4']


class AnswerThreadWhereInputRecursive4(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    answer_id: Union[_str, 'types.StringFilter']
    answer: 'AnswerRelationFilter'
    author_id: Union[_str, 'types.StringFilter']
    author: 'UserRelationFilter'
    vote_count: Union[None, _int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate AnswerThread types


    

class AnswerThreadScalarWhereWithAggregatesInput(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    answer_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerThreadScalarWhereWithAggregatesInputRecursive1']
    OR: List['AnswerThreadScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AnswerThreadScalarWhereWithAggregatesInputRecursive1']


class AnswerThreadScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    answer_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerThreadScalarWhereWithAggregatesInputRecursive2']
    OR: List['AnswerThreadScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AnswerThreadScalarWhereWithAggregatesInputRecursive2']


class AnswerThreadScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    answer_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerThreadScalarWhereWithAggregatesInputRecursive3']
    OR: List['AnswerThreadScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AnswerThreadScalarWhereWithAggregatesInputRecursive3']


class AnswerThreadScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    answer_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['AnswerThreadScalarWhereWithAggregatesInputRecursive4']
    OR: List['AnswerThreadScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AnswerThreadScalarWhereWithAggregatesInputRecursive4']


class AnswerThreadScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """AnswerThread arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    answer_id: Union[_str, 'types.StringWithAggregatesFilter']
    author_id: Union[_str, 'types.StringWithAggregatesFilter']
    vote_count: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class AnswerThreadGroupByOutput(TypedDict, total=False):
    id: _str
    content: _str
    answer_id: _str
    author_id: _str
    vote_count: _int
    created_at: datetime.datetime
    updated_at: datetime.datetime
    _sum: 'AnswerThreadSumAggregateOutput'
    _avg: 'AnswerThreadAvgAggregateOutput'
    _min: 'AnswerThreadMinAggregateOutput'
    _max: 'AnswerThreadMaxAggregateOutput'
    _count: 'AnswerThreadCountAggregateOutput'


class AnswerThreadAvgAggregateOutput(TypedDict, total=False):
    """AnswerThread output for aggregating averages"""
    vote_count: float


class AnswerThreadSumAggregateOutput(TypedDict, total=False):
    """AnswerThread output for aggregating sums"""
    vote_count: _int


class AnswerThreadScalarAggregateOutput(TypedDict, total=False):
    """AnswerThread output including scalar fields"""
    id: _str
    content: _str
    answer_id: _str
    author_id: _str
    vote_count: _int
    created_at: datetime.datetime
    updated_at: datetime.datetime


AnswerThreadMinAggregateOutput = AnswerThreadScalarAggregateOutput
AnswerThreadMaxAggregateOutput = AnswerThreadScalarAggregateOutput


class AnswerThreadMaxAggregateInput(TypedDict, total=False):
    """AnswerThread input for aggregating by max"""
    id: bool
    content: bool
    answer_id: bool
    author_id: bool
    vote_count: bool
    created_at: bool
    updated_at: bool


class AnswerThreadMinAggregateInput(TypedDict, total=False):
    """AnswerThread input for aggregating by min"""
    id: bool
    content: bool
    answer_id: bool
    author_id: bool
    vote_count: bool
    created_at: bool
    updated_at: bool


class AnswerThreadNumberAggregateInput(TypedDict, total=False):
    """AnswerThread input for aggregating numbers"""
    vote_count: bool


AnswerThreadAvgAggregateInput = AnswerThreadNumberAggregateInput
AnswerThreadSumAggregateInput = AnswerThreadNumberAggregateInput


AnswerThreadCountAggregateInput = TypedDict(
    'AnswerThreadCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'answer_id': bool,
        'author_id': bool,
        'vote_count': bool,
        'created_at': bool,
        'updated_at': bool,
        '_all': bool,
    },
    total=False,
)

AnswerThreadCountAggregateOutput = TypedDict(
    'AnswerThreadCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'answer_id': int,
        'author_id': int,
        'vote_count': int,
        'created_at': int,
        'updated_at': int,
        '_all': int,
    },
    total=False,
)


AnswerThreadKeys = Literal[
    'id',
    'content',
    'answer_id',
    'answer',
    'author_id',
    'author',
    'vote_count',
    'created_at',
    'updated_at',
]
AnswerThreadScalarFieldKeys = Literal[
    'id',
    'content',
    'answer_id',
    'author_id',
    'vote_count',
    'created_at',
    'updated_at',
]
AnswerThreadScalarFieldKeysT = TypeVar('AnswerThreadScalarFieldKeysT', bound=AnswerThreadScalarFieldKeys)

AnswerThreadRelationalFieldKeys = Literal[
        'answer',
        'author',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields